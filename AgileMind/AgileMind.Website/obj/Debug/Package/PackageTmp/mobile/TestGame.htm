<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<title>Page Title</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="../css/jquery.mobile-1.3.0.min.css" />
	<script src="../js/jquery-1.9.1.min.js" type="text/javascript"></script>
	<script src="../js/jquery.mobile-1.3.0.min.js" type="text/javascript"></script></head>
	<script src="../js/knockout-2.2.1.js" type="text/javascript"></script></head>

<body>
    
    <div data-role="page" data-theme="b">
        <div data-role="header">
            <h2>Sample Color Test</h2>
        </div>
        <div data-role="content">
            The Color Test will show you a color on the left, and a color on the right in word form.  If the word on the left, matches the actual color of the word on the right, then the color matches.  If the word on the left does not match the color on the right, then it does not match.
            
            <ul data-role="listview">
                <li>
                    <a data-bind="click: CreateQuestions">Play Game</a>
                </li>
            </ul>
        </div>
    </div>

    <div data-role="dialog" id="testQuestion" data-theme="c">
        <div data-role="header">
            <h2>Color Match</h2>
        </div>
        <div data-role="content" data-bind="with:CurrentQuestion">
            <h2>Match Not Match.</h2>
            <div class="ui-grid-a">
                <div class="ui-block-a" style="background-color:White;" data-bind="text:leftString, style: {color: leftColor}"></div>
                <div class="ui-block-b" style="background-color:White;" data-bind="text:rightString, style: {color: rightColor}"></div>
            </div>

            <div class="ui-grid-a">
                <div class="ui-block-a">
                    <a data-bind="click: $root.NoMatch" data-role="button" data-icon="arrow-d">No Match</a>
                </div>
                <div class="ui-block-b">
                    <a data-bind="click: $root.Match" data-role="button" data-icon="check">Match</a>
                </div>
            </div>
            <div>
                <p>
                </p>
            </div>

        </div>
    </div>

    <div data-role="dialog" id="Scores" data-theme="c">
        <div data-role="header">
            <h2>Your Score</h2>
        </div>
        <div data-role="content">
            <h2>You got <label data-bind="text:CorrectAnswers"></label> out of 10 correct</h2>
            <a data-rel="back" data-role="button" data-icon="arrow-d">Menu</a>

        </div>
    </div>


    <script type="text/javascript">

        function GetRandomColor() {
            var randomColor = Math.floor(Math.random() * 3);
            switch (randomColor) {
                case 0:
                    return 'Red';
                    break;
                case 1:
                    return 'Blue';
                    break;
                case 2:
                    return 'Green';
                    break;
                default:

            }
        }

        function CreateQuestion() {
            var self = new Object();
            self.leftString = GetRandomColor();
            self.leftColor = GetRandomColor();
            self.rightString = GetRandomColor();
            self.rightColor = GetRandomColor();
            if (self.leftString == self.rightColor) {
                self.IsMatch = true;
            }
            else {
                self.IsMatch = false;
            }
            self.UserCorrect = false;
            return self;
        }

        // Overall viewmodel for this screen, along with initial state
        function ColorTestViewModel() {
            var self = this;

            // Non-editable catalog data - would come from the server

            // Editable data

            self.CurrentQuestion = ko.observable(CreateQuestion());

            self.Questions = [
                                CreateQuestion()
                            ];
            self.CorrectAnswers = ko.observable(0);

            // Computed data

            // Operations

            //Select Next Question
            self.SelectNextQuestion = function () {

                var foundQuestion = false;

                //cycle through questions find the current one, then select the next one.
                for (var questionIndex = 0; questionIndex < self.Questions.length; questionIndex++) {
                    if (foundQuestion == true) {
                        self.CurrentQuestion(self.Questions[questionIndex]);
                        foundQuestion = false;
                        break;
                    }
                    if (self.CurrentQuestion() == self.Questions[questionIndex])
                        foundQuestion = true;
                }

                if (foundQuestion == true) {            // That's all the questions
                    $.mobile.changePage("#Scores",
                                    {
                                        transition: "slide",
                                        allowSamePageTransition: true,
                                        changeHash: false
                                    }
                            );
                    $('#Scores').trigger('create');

                }
                else {
                    $.mobile.changePage("#testQuestion",
                                    {
                                        transition: "flip",
                                        allowSamePageTransition: true,
                                        changeHash: false
                                    }
                            );
                    $('#testQuestion').trigger('create');
                }

            }

            //UserSelect Match
            self.Match = function () {
                if (self.CurrentQuestion().IsMatch == true) {
                    self.UserCorrect = true;
                    self.CorrectAnswers(self.CorrectAnswers() + 1);
                }
                else {
                    self.UserCorrect = false;
                }
                self.SelectNextQuestion();

            };

            //User selected nomatch
            self.NoMatch = function () {
                if (self.CurrentQuestion().IsMatch == true) {
                    self.UserCorrect = false;
                }
                else {
                    self.UserCorrect = true;
                    self.CorrectAnswers(self.CorrectAnswers() + 1);
                }
                self.SelectNextQuestion();
            };

            //CreateQuestions
            self.CreateQuestions = function () {
                self.Questions = [
                                    CreateQuestion(),
                                    CreateQuestion(),
                                    CreateQuestion(),
                                    CreateQuestion(),
                                    CreateQuestion(),
                                    CreateQuestion(),
                                    CreateQuestion(),
                                    CreateQuestion(),
                                    CreateQuestion(),
                                    CreateQuestion()
                                 ];
                self.CurrentQuestion(self.Questions[0]);
                self.CorrectAnswers(0);

                $.mobile.changePage("#testQuestion",
                                    {
                                        transition: "slide"
                                    }
                            );

                $('#testQuestion').trigger('create');


            };

        }

        ko.applyBindings(new ColorTestViewModel());
    </script>

</body>
</html>
