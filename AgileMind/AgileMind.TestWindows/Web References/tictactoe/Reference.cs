//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18033.
// 
#pragma warning disable 1591

namespace AgileMind.TestWindows.tictactoe {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ITicTacToebinding", Namespace="http://eBob42.org/")]
    public partial class ITicTacToeservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback NewGameOperationCompleted;
        
        private System.Threading.SendOrPostCallback MakeMoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback NextMoveOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsWinnerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetValueOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ITicTacToeservice() {
            this.Url = global::AgileMind.TestWindows.Properties.Settings.Default.AgileMind_TestWindows_tictactoe_ITicTacToeservice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event NewGameCompletedEventHandler NewGameCompleted;
        
        /// <remarks/>
        public event MakeMoveCompletedEventHandler MakeMoveCompleted;
        
        /// <remarks/>
        public event NextMoveCompletedEventHandler NextMoveCompleted;
        
        /// <remarks/>
        public event IsWinnerCompletedEventHandler IsWinnerCompleted;
        
        /// <remarks/>
        public event GetValueCompletedEventHandler GetValueCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Magic-ITicTacToe#NewGame", RequestNamespace="urn:Magic-ITicTacToe", ResponseNamespace="urn:Magic-ITicTacToe")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int NewGame() {
            object[] results = this.Invoke("NewGame", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void NewGameAsync() {
            this.NewGameAsync(null);
        }
        
        /// <remarks/>
        public void NewGameAsync(object userState) {
            if ((this.NewGameOperationCompleted == null)) {
                this.NewGameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewGameOperationCompleted);
            }
            this.InvokeAsync("NewGame", new object[0], this.NewGameOperationCompleted, userState);
        }
        
        private void OnNewGameOperationCompleted(object arg) {
            if ((this.NewGameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewGameCompleted(this, new NewGameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Magic-ITicTacToe#MakeMove", RequestNamespace="urn:Magic-ITicTacToe", ResponseNamespace="urn:Magic-ITicTacToe")]
        public void MakeMove(int Game, int ID, int Place) {
            this.Invoke("MakeMove", new object[] {
                        Game,
                        ID,
                        Place});
        }
        
        /// <remarks/>
        public void MakeMoveAsync(int Game, int ID, int Place) {
            this.MakeMoveAsync(Game, ID, Place, null);
        }
        
        /// <remarks/>
        public void MakeMoveAsync(int Game, int ID, int Place, object userState) {
            if ((this.MakeMoveOperationCompleted == null)) {
                this.MakeMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMakeMoveOperationCompleted);
            }
            this.InvokeAsync("MakeMove", new object[] {
                        Game,
                        ID,
                        Place}, this.MakeMoveOperationCompleted, userState);
        }
        
        private void OnMakeMoveOperationCompleted(object arg) {
            if ((this.MakeMoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MakeMoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Magic-ITicTacToe#NextMove", RequestNamespace="urn:Magic-ITicTacToe", ResponseNamespace="urn:Magic-ITicTacToe")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int NextMove(int Game, int ID) {
            object[] results = this.Invoke("NextMove", new object[] {
                        Game,
                        ID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void NextMoveAsync(int Game, int ID) {
            this.NextMoveAsync(Game, ID, null);
        }
        
        /// <remarks/>
        public void NextMoveAsync(int Game, int ID, object userState) {
            if ((this.NextMoveOperationCompleted == null)) {
                this.NextMoveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNextMoveOperationCompleted);
            }
            this.InvokeAsync("NextMove", new object[] {
                        Game,
                        ID}, this.NextMoveOperationCompleted, userState);
        }
        
        private void OnNextMoveOperationCompleted(object arg) {
            if ((this.NextMoveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NextMoveCompleted(this, new NextMoveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Magic-ITicTacToe#IsWinner", RequestNamespace="urn:Magic-ITicTacToe", ResponseNamespace="urn:Magic-ITicTacToe")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int IsWinner(int Game) {
            object[] results = this.Invoke("IsWinner", new object[] {
                        Game});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void IsWinnerAsync(int Game) {
            this.IsWinnerAsync(Game, null);
        }
        
        /// <remarks/>
        public void IsWinnerAsync(int Game, object userState) {
            if ((this.IsWinnerOperationCompleted == null)) {
                this.IsWinnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsWinnerOperationCompleted);
            }
            this.InvokeAsync("IsWinner", new object[] {
                        Game}, this.IsWinnerOperationCompleted, userState);
        }
        
        private void OnIsWinnerOperationCompleted(object arg) {
            if ((this.IsWinnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsWinnerCompleted(this, new IsWinnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:Magic-ITicTacToe#GetValue", RequestNamespace="urn:Magic-ITicTacToe", ResponseNamespace="urn:Magic-ITicTacToe")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int GetValue(int Game, int Place) {
            object[] results = this.Invoke("GetValue", new object[] {
                        Game,
                        Place});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetValueAsync(int Game, int Place) {
            this.GetValueAsync(Game, Place, null);
        }
        
        /// <remarks/>
        public void GetValueAsync(int Game, int Place, object userState) {
            if ((this.GetValueOperationCompleted == null)) {
                this.GetValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValueOperationCompleted);
            }
            this.InvokeAsync("GetValue", new object[] {
                        Game,
                        Place}, this.GetValueOperationCompleted, userState);
        }
        
        private void OnGetValueOperationCompleted(object arg) {
            if ((this.GetValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetValueCompleted(this, new GetValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void NewGameCompletedEventHandler(object sender, NewGameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MakeMoveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void NextMoveCompletedEventHandler(object sender, NextMoveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NextMoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NextMoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsWinnerCompletedEventHandler(object sender, IsWinnerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsWinnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsWinnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetValueCompletedEventHandler(object sender, GetValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591